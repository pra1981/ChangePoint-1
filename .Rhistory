##Function
EBIC= function(S,v=NULL,method="SIFS"){
if (method=="SIFS"){
full=(n-1)*(p+1)
temp = cbind(X,Z[,S])
H = temp%*%solve(t(temp)%*%temp)%*%t(temp)
projection  = sum(((diag(1,n)-H)%*%Y)^2)
gamma = (1-log(n)/(2*log(full)))
return( n*log(projection/n)+length(S)*log(n)+2*gamma*log(choose(full,length(S))) )
}
if (method=="SBFS"){
temp = cbind(X,Z[,S])
H = temp%*%solve(t(temp)%*%temp)%*%t(temp)
projection  = sum(((diag(1,n)-H)%*%Y)^2)
gamma = (1-log(n)/(2*log((n-1)*(p+1))))
if (length(v) == 0){
return( n*log(projection/n)+(length(S))*log(n) )
} else {
return( n*log(projection/n)+(length(S)+2*gamma*length(v))*log(n)+2*gamma*sum(sapply( v,function(x) log(choose(p+1,x)) )) )
}
}
}
Summary =function(S,Y,X,Z){
coef=lm(Y~cbind(X,Z[,S])-1)$coefficients
names(coef)=NULL
est_beta=coef[1:(p+1)]
est_kesi=rep(0,(n-1)*(p+1))
est_kesi[S]=coef[-(1:(p+1))]
est_kesi =matrix(est_kesi,p+1,n-1)
est_bp=which(apply(est_kesi,2,any))
temp_beta=est_beta
for ( i in 1:length(est_bp)){
temp_beta = temp_beta + est_kesi[,est_bp[i]]
est_beta = cbind(est_beta,temp_beta)
}
colnames(est_beta)=NULL
Estimation=list(Break_Point=est_bp,Beta=est_beta,diff=t(diff(t(est_beta))))
return(Estimation)
}
##Settings
n=1000
sigma=0.5
p=7
K=3
##Initial Setup
X = matrix(rnorm(n*p),n,p)
X = cbind(rep(1,n),X)
Z = NULL
for (t in 2:n){
Z = cbind(Z,diag(c(rep(0,t-1),rep(1,n-t+1)))%*%X)
}
break_point = c(200,350)
break_point_ex = c(0,break_point,n)
diff_bp = diff(break_point_ex)
Y = matrix(0,n,1)
# Beta = NULL
# for (bp in 1:K){
#     beta = runif(p+1,bp,1+bp)
#     Y = Y + diag(c(rep(0,break_point[bp]),rep(1,diff_bp[bp]),rep(0,n-break_point[bp+1])))%*% X %*% beta
#     Beta = cbind(Beta,beta)
# }
Beta = cbind(
c(1, 1, 1, 0, 0, 1, 2, -1, 0, 0, 1.2, 0),
c(1.5, 1.1, 1, 0, 0, -1, 1.8, 1, 0, 0, 1, 0),
c(0.5, 1.2, 1, 0, 0, 0, 1.6, 0, 0, 0, 0.8, 0)
)
for (bp in 1:K){
Y = Y + diag(c(rep(0,break_point_ex[bp]),rep(1,diff_bp[bp]),rep(0,n-break_point_ex[bp+1])))%*% X %*% Beta[1:(p+1),bp]
}
E = matrix(rnorm(n,0,sigma),n,1)
Y = Y + E
rm(t,bp,diff_bp,break_point_ex)
##SLasso Detection
###SIFS
S1 = NULL
SA=1:(n-1)*(p+1)
ebic=Inf
repeat{
temp = cbind(X,Z[,S1])
H = temp%*%solve(t(temp)%*%temp)%*%t(temp)
rm(temp)
ybar = (diag(1,n)-H)%*%Y
rm(H)
R=0
for ( i in SA){
tempr = abs(t(Z[,i])%*%ybar)
if(tempr > R){
R=tempr
temp_s=i
}
}
new_S=c(S1,temp_s)
new_S=new_S[order(new_S)]
rm(tempr)
new_ebic=EBIC(new_S,method="SIFS")
if(new_ebic>ebic | length(S)==(n-1)*(p+1)){
break
} else {
ebic=new_ebic
S1=new_S
SA=SA[SA!=temp_s]
}
}
rm(i,R)
rm(temp_s,new_S,new_ebic,ebic,SA,ybar)
estimation_SIFS=Summary(S,Y,X,Z)
###SBFS
S = NULL
TA=1:(n-p-1)
v = NULL
ebic=Inf
repeat{
temp = cbind(X,Z[,S])
H = temp%*%solve(t(temp)%*%temp)%*%t(temp)
ybar = (diag(1,n)-H)%*%Y
rm(temp,H)
R2=0
for ( i in TA){
Zt = Z[,((i-1)*(p+1)+1):(i*(p+1))]
tempR2 = t(ybar)%*%Zt%*%solve(t(Zt)%*%Zt)%*%t(Zt)%*%ybar
if(tempR2 > R2){
R2=tempR2
temp_t=i
}
}
ST = ((temp_t-1)*(p+1)+1):(temp_t*(p+1))
rm(tempR2)
new_S=c(S,ST)
new_S=new_S[order(new_S)]
repeat{
inter_ebic=EBIC(new_S,v,method="SBFS")
tebic=Inf
for(i in ST){
temp_new_S=new_S[new_S!=i]
temp_ebic=EBIC(temp_new_S,v,method="SBFS")
if(temp_ebic<tebic){
tebic=temp_ebic
temp_rms=i
}
}
if(tebic<inter_ebic){
ST = ST[ST!=temp_rms]
new_S = new_S[new_S!=temp_rms]
} else {
break
}
}
v = c(v,length(ST))
new_ebic=EBIC(new_S,v,method="SBFS")
if(new_ebic < ebic){
ebic=new_ebic
S=new_S
TA=TA[TA!=temp_t]
} else {
break
}
}
rm(i,v,R2)
rm(temp_rms,temp_t,inter_ebic,temp_ebic,new_ebic,ebic,tebic,temp_new_S,new_S,ST,TA,ybar)
estimation_SBFS=Summary(S,Y,X,Z)
break_point
estimation_SIFS$Break_Point
estimation_SBFS$Break_Point
Beta[1:(p+1),]
estimation_SIFS$Beta
estimation_SBFS$Beta
estimation_SIFS=Summary(S1,Y,X,Z)
break_point
estimation_SIFS$Break_Point
estimation_SBFS$Break_Point
Beta[1:(p+1),]
estimation_SIFS$Beta
estimation_SBFS$Beta
##Function
EBIC= function(S,v=NULL,method="SIFS"){
if (method=="SIFS"){
full=(n-1)*(p+1)
temp = cbind(X,Z[,S])
H = temp%*%solve(t(temp)%*%temp)%*%t(temp)
projection  = sum(((diag(1,n)-H)%*%Y)^2)
gamma = (1-log(n)/(2*log(full)))
return( n*log(projection/n)+length(S)*log(n)+2*gamma*log(choose(full,length(S))) )
}
if (method=="SBFS"){
temp = cbind(X,Z[,S])
H = temp%*%solve(t(temp)%*%temp)%*%t(temp)
projection  = sum(((diag(1,n)-H)%*%Y)^2)
gamma = (1-log(n)/(2*log((n-1)*(p+1))))
if (length(v) == 0){
return( n*log(projection/n)+(length(S))*log(n) )
} else {
return( n*log(projection/n)+(length(S)+2*gamma*length(v))*log(n)+2*gamma*sum(sapply( v,function(x) log(choose(p+1,x)) )) )
}
}
}
Summary =function(S,Y,X,Z){
coef=lm(Y~cbind(X,Z[,S])-1)$coefficients
names(coef)=NULL
est_beta=coef[1:(p+1)]
est_kesi=rep(0,(n-1)*(p+1))
est_kesi[S]=coef[-(1:(p+1))]
est_kesi =matrix(est_kesi,p+1,n-1)
est_bp=which(apply(est_kesi,2,any))
temp_beta=est_beta
for ( i in 1:length(est_bp)){
temp_beta = temp_beta + est_kesi[,est_bp[i]]
est_beta = cbind(est_beta,temp_beta)
}
colnames(est_beta)=NULL
Estimation=list(Break_Point=est_bp,Beta=est_beta,diff=t(diff(t(est_beta))))
return(Estimation)
}
##Settings
n=1000
sigma=0.5
p=7
K=3
##Initial Setup
X = matrix(rnorm(n*p),n,p)
X = cbind(rep(1,n),X)
Z = NULL
for (t in 2:n){
Z = cbind(Z,diag(c(rep(0,t-1),rep(1,n-t+1)))%*%X)
}
break_point = c(200,350)
break_point_ex = c(0,break_point,n)
diff_bp = diff(break_point_ex)
Y = matrix(0,n,1)
# Beta = NULL
# for (bp in 1:K){
#     beta = runif(p+1,bp,1+bp)
#     Y = Y + diag(c(rep(0,break_point[bp]),rep(1,diff_bp[bp]),rep(0,n-break_point[bp+1])))%*% X %*% beta
#     Beta = cbind(Beta,beta)
# }
Beta = cbind(
c(1, 1, 1, 0, 0, 1, 2, -1, 0, 0, 1.2, 0),
c(1.5, 1.1, 1, 0, 0, -1, 1.8, 1, 0, 0, 1, 0),
c(0.5, 1.2, 1, 0, 0, 0, 1.6, 0, 0, 0, 0.8, 0)
)
for (bp in 1:K){
Y = Y + diag(c(rep(0,break_point_ex[bp]),rep(1,diff_bp[bp]),rep(0,n-break_point_ex[bp+1])))%*% X %*% Beta[1:(p+1),bp]
}
E = matrix(rnorm(n,0,sigma),n,1)
Y = Y + E
rm(t,bp,diff_bp,break_point_ex)
##SLasso Detection
###SIFS
S1 = NULL
SA=1:(n-1)*(p+1)
ebic=Inf
repeat{
temp = cbind(X,Z[,S1])
H = temp%*%solve(t(temp)%*%temp)%*%t(temp)
rm(temp)
ybar = (diag(1,n)-H)%*%Y
rm(H)
R=0
for ( i in SA){
tempr = abs(t(Z[,i])%*%ybar)
if(tempr > R){
R=tempr
temp_s=i
}
}
new_S=c(S1,temp_s)
new_S=new_S[order(new_S)]
rm(tempr)
new_ebic=EBIC(new_S,method="SIFS")
if(new_ebic>ebic | length(S)==(n-1)*(p+1)){
break
} else {
ebic=new_ebic
S1=new_S
SA=SA[SA!=temp_s]
}
}
rm(i,R)
rm(temp_s,new_S,new_ebic,ebic,SA,ybar)
estimation_SIFS=Summary(S1,Y,X,Z)
###SBFS
S = NULL
TA=1:(n-p-1)
v = NULL
ebic=Inf
repeat{
temp = cbind(X,Z[,S])
H = temp%*%solve(t(temp)%*%temp)%*%t(temp)
ybar = (diag(1,n)-H)%*%Y
rm(temp,H)
R2=0
for ( i in TA){
Zt = Z[,((i-1)*(p+1)+1):(i*(p+1))]
tempR2 = t(ybar)%*%Zt%*%solve(t(Zt)%*%Zt)%*%t(Zt)%*%ybar
if(tempR2 > R2){
R2=tempR2
temp_t=i
}
}
ST = ((temp_t-1)*(p+1)+1):(temp_t*(p+1))
rm(tempR2)
new_S=c(S,ST)
new_S=new_S[order(new_S)]
repeat{
inter_ebic=EBIC(new_S,v,method="SBFS")
tebic=Inf
for(i in ST){
temp_new_S=new_S[new_S!=i]
temp_ebic=EBIC(temp_new_S,v,method="SBFS")
if(temp_ebic<tebic){
tebic=temp_ebic
temp_rms=i
}
}
if(tebic<inter_ebic){
ST = ST[ST!=temp_rms]
new_S = new_S[new_S!=temp_rms]
} else {
break
}
}
v = c(v,length(ST))
new_ebic=EBIC(new_S,v,method="SBFS")
if(new_ebic < ebic){
ebic=new_ebic
S=new_S
TA=TA[TA!=temp_t]
} else {
break
}
}
rm(i,v,R2)
rm(temp_rms,temp_t,inter_ebic,temp_ebic,new_ebic,ebic,tebic,temp_new_S,new_S,ST,TA,ybar)
estimation_SBFS=Summary(S,Y,X,Z)
break_point
estimation_SIFS$Break_Point
estimation_SBFS$Break_Point
Beta[1:(p+1),]
estimation_SIFS$Beta
estimation_SBFS$Beta
